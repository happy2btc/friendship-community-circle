/**
 * Agreements (Polls) and Votes Tables
 * Defines polls and tracks user votes.
 */

-- migrate:up
-- Table for the agreements/polls themselves
create table public.agreements (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone not null default now(),
  question text not null,
  description text,
  ends_at timestamp with time zone
);

comment on table public.agreements is 'Polls for community voting.';

-- Table to store individual votes
create table public.votes (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone not null default now(),
  agreement_id bigint not null references public.agreements(id) on delete cascade,
  voter_id uuid not null references auth.users(id) on delete cascade,
  vote_option text not null, -- e.g., 'yes', 'no', 'abstain'
  -- A user can only vote once on each agreement
  unique (agreement_id, voter_id)
);

comment on table public.votes is 'Tracks individual user votes on agreements.';

-- Enable RLS on both tables
alter table public.agreements enable row level security;
alter table public.votes enable row level security;

-- Policies for Agreements
create policy "Agreements are viewable by everyone"
on public.agreements for select using (true);

-- Policies for Votes
create policy "Users can cast votes"
on public.votes for insert
to authenticated with check ( voter_id = auth.uid() );

create policy "Users can view their own votes"
on public.votes for select
using ( voter_id = auth.uid() );

-- migrate:down
drop table if exists public.votes;
drop table if exists public.agreements;